//
// Created by dxve on 15.5.23.
//

#ifndef SEMESTRAL_CGAME_H
#define SEMESTRAL_CGAME_H

#include "vector"
#include "memory"
#include "map"
#include "fstream"
#include "iostream"
#include "sstream"

#include "../libs/json.hpp"

#include "CBuilding.h"
#include "CFarm.h"
#include "CFactory.h"
#include "CMine.h"
#include "CPlayerStats.h"
#include "CDeposit.h"
#include "CEndgameScenarios.h"
#include "CPosition.h"

/**
 * @brief Stores and manages objects on game board and templates for buildings.
 */
class CGame{
private:
    /**
     * Vector storing pointers to playerStats, players are stored in CApp
     */
    std::vector<CPlayerStats * > players;

    /**
     * Map used to find player by his name, used while loading buildings from file
     */
    std::map<std::string, CPlayerStats *> players_map;

    /**
     * @brief Game board
     *
     * Stores pair <building, deposit>
     */
    std::vector<std::vector<std::pair<std::shared_ptr<CBuilding>, CDeposit>>> board;

    int board_width, board_height;

    /**
     * Vector of pointers to building, used in CGame.update() for faster iteration then going through whole board.
     */
    std::vector<std::shared_ptr<CBuilding>> buildings;

    /**
     * Stores all buildings that player can build.
     */
    std::map<std::string, std::shared_ptr<CBuilding>> building_templates;

    /**
     * Buildings create update messages when they cannot work correctly, all messages are printed after end of round.
     */
    std::map<std::string, std::vector<std::string>> update_messages;

    /**
     * Stores types of deposits, used in help printing
     */
    std::vector<std::pair<CDeposit, std::vector<CPosition>>> deposit_types;

    /**
     * Actions and building templates do not change in game, so we cant copy them from initial save file while saving ongoing game.
     */
    std::string save_path;

    /**
     *
     */
    CEndgameScenarios end_scenarios;

public:
    int player_on_move;

    /**
     * Flag is set when player chooses to exit game, and checked in game loop.
     */
    bool exit_called;

    /**
     * Method loads buildings template, board state from given file, and which player is on move from given file.
     *
     * @param config_path Path to configuration/save file.
     */
    void loadGame(const std::string & save_file_path);
    /**
     * Loads building templates from given json object.
     *
     * @param building_templates_json Json object storing all building templates.
     */
    void loadBuildingTemplates(const nlohmann::json & building_templates_json);
    /**
     * Loads state of the board from given json object.
     *
     * @param board_state_json Json object storing state of the game board.
     */
    void loadBoardState(const nlohmann::json & board_state_json);
    /**
     * Loads positions and definitions of all resource deposits.
     *
     * @param deposit_json Json object storing information about deposits.
     */
    void loadDeposits(const nlohmann::json & deposit_json);

    /**
     * Draws current state of game board and information about player that is on turn.
     */
    void draw() const;
    /**
     * Updates all building objects on board.
     */
    void update();
    /**
     * Prints all update messages generated by buildings on board, when CGAme:update() is called
     */
    void printUpdateMessages();
    /**
     * Used to connect players stored in CApp to CGame.
     *
     * @param player Pointer to a player stored in CApp.
     */
    void addPlayer(CPlayerStats * player);

    /**
     * Builds copy of chosen building on position selected by the player on the move.
     *
     * @param building_name Name of the building, used to find building in building_templates map.
     * @param message Method will create error message when the chosen building cannot be built on selected tile.
     * @return Returns true if building was successfully built, false if not.
     */
    bool build(const std::string & building_name, std::string & message);

    /**
     * Changes position of player that is currently on move.
     *
     * @return False if given position is out of bounds.
     */
    bool changeCurrentPlayerPosition(int x, int y) const;

    /**
     * Method called when player ends his round, changes player_on_move
     */
    void nextRound();
    /**
     * Method is called everytime player ends his turn, if player_on_move reaches number of players, method resets it to 0 and returns true to end the round.
     *
     * @return True if round ended.
     */
    bool roundOver();
    /**
     * Saves current state of board, building templates, deposit locations, and players into given file.
     *
     * @param initial_save_path Path to save file.
     */
    void saveCurrentState(const std::string & initial_save_path) const;

    const std::map<std::string, std::shared_ptr<CBuilding>> & getBuildingTemplates() const;

    /**
     * @return Returns reference to a tile that is selected by player on move.
     */
    const std::pair<std::shared_ptr<CBuilding>, CDeposit> & getSelectedTile() const;

    /**
     * Creates string with names of all players, names and textures of possible buildings and deposits
     */
    void printHelp() const;

    /**
     * Multiplies production rates of building selected by player on the move.
     *
     * @param multiplier
     */
    bool upgradeSelectedBuilding(double multiplier) const;

    /**
     * Returns true if there is a building on the tile selected by player on move.
     */
    bool playerSelectedBuilding() const;

    /**
     *
     * @return Pointer to the player that is currently on move. Used in actions.
     */
    CPlayerStats * accessPlayerOnMove() const;

    /**
     *
     * @return Pointer to the building  currently selected by a player on the move.
     */
    CBuilding * accessSelectedBuilding() const;

    /**
     * Destroys building in given radius around selected position.
     */
    void destroyBuildingsInArea(int radius);

    /**
     * Destroys building on given position
     */
    void destroyBuildingOnPos(int x, int y);

    /**
     *
     * @param radius
     * @return Returns true if there are enemy buildings in given radius (buildings not build by player on turn).
     */
    bool enemyBuildingsInArea(int radius) const;

    /**
     * @return True if endgame scenario has been met.
     */
    bool checkGameEnd();

    const std::vector<CPlayerStats * > & getPlayers() const;

    int getBoardWidth() const;

    int getBoardHeight() const;

    const CEndgameScenarios & getEndGameScenarios() const;

    const CBuilding * getBuildingAt(int x, int y) const;

    /**
     * Creates deposit with given values on a tile selected by player.
     *
     * @param resource
     * @param amount
     */
    void createDeposit(const std::string & resource, int amount, char texture);

    /**
     * Checks if there is a deposit of given resource.
     *
     * @param resource Needed resource.
     * @return True if there is deposit on board.
     */
    bool depositExists(const std::string & resource);

};

#endif //SEMESTRAL_CGAME_H
